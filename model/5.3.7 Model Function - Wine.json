{"_type":"model-function","_hash":"a5186db2ccfa88cae2aea41b7aca240de3988468","_func":{"label":"Model Function - Wine","tags":[],"description":"Model Function Example for Wine Data","type":"udf","specType":"udf","content":{"_label":"brightics.deeplearning.model_function","_description":"user_defined_model_function","_tags":[],"module":"brightics.deeplearning.model_function","name":"UserDefinedModelFunction","params":{"code":{"_description":"Function Code","_label":"Function Code","_type":"code","_value":"def model_function(features, labels, mode, params):\n    import tensorflow as tf\n\n    ## Deep Learning - Sequential\n    # input layer\n    net = features\n    # hidden layer\n    net = tf.layers.dense(net, units=100, activation=tf.nn.sigmoid)\n    net = tf.layers.dense(net, units=50, activation=tf.nn.relu)\n    # output layer(logits)\n    logits = tf.layers.dense(net, units=params['n_classes'])\n    \n    \n    # Loss\n    loss = tf.losses.softmax_cross_entropy(labels,logits)\n    # Evaluation metrics\n    accuracy = tf.metrics.accuracy(labels=tf.argmax(labels,axis=1),\n                                   predictions=tf.argmax(logits,axis=1), \n                                   name='acc_op')\n    metrics = {'accuracy': accuracy}\n    tf.summary.scalar('accuracy', accuracy[1])\n    \n    # TRAIN Mode\n    if mode == tf.estimator.ModeKeys.TRAIN:\n        optimizer = tf.train.AdamOptimizer(learning_rate=params['learning_rate'])\n        train_op = optimizer.minimize(loss, global_step=tf.train.get_global_step())\n        return tf.estimator.EstimatorSpec(mode, loss=loss, train_op=train_op)\n\n    # PREDICT Mode\n    if mode == tf.estimator.ModeKeys.PREDICT:\n        predictions = {\n            'class_ids': tf.argmax(logits,axis=1),\n            'probabilities': tf.nn.softmax(logits),\n            'logits': logits,\n        }\n        return tf.estimator.EstimatorSpec(mode, predictions=predictions)\n    \n    # EVAL Mode\n    if mode == tf.estimator.ModeKeys.EVAL:\n        return tf.estimator.EstimatorSpec(mode, loss=loss, eval_metric_ops=metrics)\n","_control":"codeEditor","_optional":false},"parameters":{"module":"builtins","name":"dict","_description":"Parameters","_label":"Parameters","_type":"parameters","_optional":true,"params":{"learning_rate":{"_label":"learning_rate","_description":"learning_rate","_type":"number","_value":0.001,"_optional":true,"_control":"input"},"n_classes":{"_label":"n_classes","_description":"n_classes","_type":"number","_value":7,"_optional":true,"_control":"input"}}}}}}}